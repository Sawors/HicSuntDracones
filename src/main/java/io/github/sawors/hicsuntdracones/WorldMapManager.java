package io.github.sawors.hicsuntdracones;

import com.google.gson.*;
import io.github.sawors.hicsuntdracones.mapping.MappedChunk;
import io.github.sawors.hicsuntdracones.mapping.WorldTile;
import org.bukkit.Bukkit;
import org.bukkit.World;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;

public class WorldMapManager {
    
    private final static Map<World, WorldMapManager> worldManagers = new HashMap<>();
    // file storage
    private final static File regionRootDirectory = new File(Main.getPlugin().getDataFolder().getPath() +File.separator+ "regions");
    // world and world directory
    private final World world;
    private final File worldDirectory;
    private final File tileSaveFile;
    // save thread
    ExecutorService saveThread = Executors.newSingleThreadExecutor();
    LinkedList<Runnable> saveTasks = new LinkedList<>();
    
    protected WorldMapManager(World world) {
        this.world = world;
        this.worldDirectory = new File(regionRootDirectory.getPath()+File.separator+world.getName());
        this.tileSaveFile = new File(worldDirectory.getPath()+File.separator+"tiles.json");
        
        worldDirectory.mkdirs();
        try{
            tileSaveFile.createNewFile();
            // put the world manager only if the save file can be created / reached
            worldManagers.put(world,this);
        } catch (IOException e){
            Bukkit.getLogger().log(Level.WARNING, "Failed to create the tile data file for world "+world.getName()+" !");
        }
    }
    
    public static WorldMapManager getInstance(World world){
        return worldManagers.getOrDefault(world,new WorldMapManager(world));
    }
    
    /**
     *
     * @param data a set containing all the chunks to be saved. Please note that if the chunks are not yet mapped
     *             or if a chunk has not yet been generated by the server its data will not be added to the save file.
     */
    public void saveData(Set<MappedChunk> data){
        saveTasks.add(() -> {
            JsonObject saveJson = new JsonObject();
            // TODO : fix the unterminated string bug
            try(Reader r = new BufferedReader(new InputStreamReader(Files.newInputStream(tileSaveFile.toPath()), StandardCharsets.UTF_8))){
                try{
                    JsonObject oldData = new Gson().fromJson(r,JsonObject.class);
                    if(oldData != null){
                        for(Map.Entry<String, JsonElement> entry : oldData.entrySet()){
                            saveJson.add(entry.getKey(),entry.getValue());
                        }
                    }
                } catch (JsonSyntaxException e2){
                    Main.logger().logAdmin(e2.getMessage());
                }
            } catch (IOException e){
                Main.logger().logAdmin(e.getMessage());
            }
            for(MappedChunk chunk : data){
                if(chunk != null){
                    for(WorldTile tile : chunk.getTiles()){
                        if(tile != null){
                            String section = tile.x()+","+tile.z();
                            saveJson.add(section,tile.getSaveData());
                        }
                    }
                }
            }
            
            try(Writer out = new FileWriter(tileSaveFile, StandardCharsets.UTF_8)){
                Gson gson = new GsonBuilder().setPrettyPrinting().create();
                out.write(gson.toJson(saveJson));
            } catch (IOException e){
                e.printStackTrace();
            }
            if(!saveTasks.isEmpty()){
                saveThread.execute(saveTasks.pop());
            }
        });
        if(saveTasks.size() == 1){
            saveThread.execute(saveTasks.pop());
        }
    }
    
    public File getTileSaveFile() {
        return tileSaveFile;
    }
    
}
